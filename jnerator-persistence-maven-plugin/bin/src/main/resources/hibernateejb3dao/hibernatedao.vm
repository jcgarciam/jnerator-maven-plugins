package ${jdoInfo.javaPckName}.hibernate;

import java.util.List;
import java.sql.Timestamp;

import ${jdoInfo.javaPckName}.pojo.${jdoInfo.javaClassName};
import ${jdoInfo.javaPckName}.${jdoInfo.javaClassName}DAO;
#if ($util.getLength($jdoInfo.getPk()) > 1)
import ${jdoInfo.javaPckName}.pojo.${jdoInfo.javaClassName}.${jdoInfo.javaClassName}PK;
#end

import org.hibernate.criterion.Restrictions;
#set ($pk="Long")
#foreach($col in ${jdoInfo.jdoColInfos})
#foreach($colpk in ${jdoInfo.getPk()})
#if ($colpk.col.equals($col.colName))
#set ($pk=$util.getClassNameForPrimitive($col.javaAttClass))
#end
#end
#end
#if ($util.getLength($jdoInfo.getPk()) > 1)
#set ($pk="${jdoInfo.javaClassName}PK")
#end

/**
 * <p>Hibernate DAO layer for ${jdoInfo.javaClassName}s</p>
 * <p>Generated at $date</p>
 *
 * @author ${generatorVersion}
 * @see http://www.hibernate.org/328.html
 */
public class ${jdoInfo.javaClassName}HibernateDAO extends
		AbstractHibernateDAO<${jdoInfo.javaClassName}, $pk> implements
		${jdoInfo.javaClassName}DAO {

#if ($util.getLength($jdoInfo.getPk()) > 1)
#foreach($col in ${jdoInfo.jdoColInfos})
#set ($ispk="false")
#foreach($colpk in ${jdoInfo.getPk()})
#if ($colpk.col.equals($col.colName))
#set ($ispk="true")
#end
#end
#set ($isfk="false")
#foreach($colfk in ${jdoInfo.getImportedFk()})
#foreach($colfk2 in $colfk)
#if($colfk2.getFkColumnName().equals($col.colName))
#set ($isfk="true")
	/**
	 * Find ${jdoInfo.javaClassName} by ${col.javaAttName}
	 */
	@SuppressWarnings("unchecked")
	public List<${jdoInfo.javaClassName}> findBy$util.doNameCreator.attribute2class($col.javaAttName)($col.getNonPrimitifClass() ${col.javaAttName}) {
		return findByCriteria(Restrictions.eq("$util.doNameCreator.class2attribute($util.doNameCreator.createDoName(${colfk2.getPkTableName()})).${col.javaAttName}", ${col.javaAttName}));
	}
	
#end
#end
#end
#if ($isfk=="false" && $ispk=="false")
	/**
	 * Find ${jdoInfo.javaClassName} by ${col.javaAttName}
	 */
	public List<${jdoInfo.javaClassName}> findBy$util.doNameCreator.attribute2class($col.javaAttName)($col.getNonPrimitifClass() ${col.javaAttName}) {
		return findByCriteria(Restrictions.eq("${col.javaAttName}", ${col.javaAttName}));
	}

#else
#if ($ispk=="true" && $isfk=="false")
	/**
	 * Find ${jdoInfo.javaClassName} by ${col.javaAttName}
	 */
	public List<${jdoInfo.javaClassName}> findBy$util.doNameCreator.attribute2class($col.javaAttName)($col.getNonPrimitifClass() ${col.javaAttName}) {
		return findByCriteria(Restrictions.eq("id.${col.javaAttName}", ${col.javaAttName}));
	}
#end
#end	
#end
#else
#foreach($col in ${jdoInfo.jdoColInfos})
#set ($ispk="false")
#foreach($colpk in ${jdoInfo.getPk()})
#if ($colpk.col.equals($col.colName))
#set ($ispk="true")
#end
#end
#set ($isfk="false")
#foreach($colfk in ${jdoInfo.getImportedFk()})
#foreach($colfk2 in $colfk)
#if($colfk2.getFkColumnName().equals($col.colName))
#set ($isfk="true")
	/**
	 * Find ${jdoInfo.javaClassName} by ${col.javaAttName}
	 */
	@SuppressWarnings("unchecked")
	public List<${jdoInfo.javaClassName}> findBy$util.doNameCreator.attribute2class($col.javaAttName)($col.getNonPrimitifClass() ${col.javaAttName}) {
		return findByCriteria(Restrictions.eq("$util.doNameCreator.class2attribute($util.doNameCreator.createDoName(${colfk2.getPkTableName()})).${col.javaAttName}", ${col.javaAttName}));
	}
	
#end
#end
#end
#if ($ispk=="false" && $isfk=="false")
	/**
	 * Find ${jdoInfo.javaClassName} by ${col.javaAttName}
	 */
	public List<${jdoInfo.javaClassName}> findBy$util.doNameCreator.attribute2class($col.javaAttName)($col.getNonPrimitifClass() ${col.javaAttName}) {
		return findByCriteria(Restrictions.eq("${col.javaAttName}", ${col.javaAttName}));
	}
	
#end
#end
#end

}
